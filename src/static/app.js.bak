document.addEventListener("DOMContentLoaded", () => {document.addEventListener("DOMContentLoaded", () => {

  const activitiesList = document.getElementById("activities-list");  const activitiesList = document.getElementById("activities-list");

  const activitySelect = document.getElementById("activity");  const activitySelect = document.getElementById("activity");

  const signupForm = document.getElementById("signup-form");  const signupForm = document.getElementById("signup-form");

  const messageDiv = document.getElementById("message");  const messageDiv = document.getElementById("message");

  

  // Add helper to escape HTML to avoid XSS when inserting participant names  // Initial fetch of activities

  function escapeHtml(str) {  fetchActivities();

    return String(str)

      .replace(/&/g, "&amp;")  // Add helper to escape HTML to avoid XSS when inserting participant names

      .replace(/</g, "&lt;")  function escapeHtml(str) {

      .replace(/>/g, "&gt;")    return String(str)

      .replace(/"/g, "&quot;")      .replace(/&/g, "&amp;")

      .replace(/'/g, "&#039;");      .replace(/</g, "&lt;")

  }      .replace(/>/g, "&gt;")

      .replace(/"/g, "&quot;")

  // Function to fetch activities from API      .replace(/'/g, "&#039;");

  async function fetchActivities() {  }

    try {

      const response = await fetch("/activities");  // Function to fetch activities from API

      const activities = await response.json();  async function fetchActivities() {

    try {

      // Clear loading message and select options      const response = await fetch("/activities");

      activitiesList.innerHTML = "";      const activities = await response.json();

      activitySelect.innerHTML = "";

      // Clear loading message

      // Populate activities list      activitiesList.innerHTML = "";

      Object.entries(activities).forEach(([name, details]) => {

        const activityCard = document.createElement("div");      // Populate activities list

        activityCard.className = "activity-card";      Object.entries(activities).forEach(([name, details]) => {

        const activityCard = document.createElement("div");

        const spotsLeft = details.max_participants - details.participants.length;        activityCard.className = "activity-card";



        // Render participants as a list with delete buttons        const spotsLeft = details.max_participants - details.participants.length;

        const participantsHtml = details.participants.length

          ? details.participants.map((p) => `        // Render participants as a list with delete buttons (or show a placeholder when empty)

              <li class="participant-item">        const participantsHtml = details.participants.length

                ${escapeHtml(p)}          ? details.participants.map((p) => `

                <button class="delete-btn" data-activity="${escapeHtml(name)}" data-email="${escapeHtml(p)}" aria-label="Unregister ${escapeHtml(p)}">              <li class="participant-item">

                  ✕                ${escapeHtml(p)}

                </button>                <button class="delete-btn" data-activity="${escapeHtml(name)}" data-email="${escapeHtml(p)}" aria-label="Unregister ${escapeHtml(p)}">

              </li>`).join("")                  ✕

          : `<li class="participant-item empty">No participants yet</li>`;                </button>

              </li>`).join("")

        activityCard.innerHTML = `          : `<li class="participant-item empty">No participants yet</li>`;

          <h4>${escapeHtml(name)}</h4>

          <p>${escapeHtml(details.description)}</p>        activityCard.innerHTML = `

          <p><strong>Schedule:</strong> ${escapeHtml(details.schedule)}</p>          <h4>${escapeHtml(name)}</h4>

          <p><strong>Availability:</strong> ${spotsLeft} spots left</p>          <p>${escapeHtml(details.description)}</p>

          <p><strong>Schedule:</strong> ${escapeHtml(details.schedule)}</p>

          <div class="participants-section">          <p><strong>Availability:</strong> ${spotsLeft} spots left</p>

            <h5>Participants</h5>

            <ul class="participants-list">          <div class="participants-section">

              ${participantsHtml}            <h5>Participants</h5>

            </ul>            <ul class="participants-list">

          </div>              ${participantsHtml}

        `;            </ul>

          </div>

        activitiesList.appendChild(activityCard);        `;



        // Add option to select dropdown        activitiesList.appendChild(activityCard);

        const option = document.createElement("option");

        option.value = name;        // Add option to select dropdown

        option.textContent = name;        const option = document.createElement("option");

        activitySelect.appendChild(option);        option.value = name;

      });        option.textContent = name;

    } catch (error) {        activitySelect.appendChild(option);

      activitiesList.innerHTML = "<p>Failed to load activities. Please try again later.</p>";      });

      console.error("Error fetching activities:", error);    } catch (error) {

    }      activitiesList.innerHTML = "<p>Failed to load activities. Please try again later.</p>";

  }      console.error("Error fetching activities:", error);

    }

  // Handle form submission  }

  signupForm.addEventListener("submit", async (event) => {

    event.preventDefault();  // Handle form submission

  signupForm.addEventListener("submit", async (event) => {

    const email = document.getElementById("email").value;    event.preventDefault();

    const activity = document.getElementById("activity").value;

    const email = document.getElementById("email").value;

    try {    const activity = document.getElementById("activity").value;

      const response = await fetch(

        `/activities/${encodeURIComponent(activity)}/signup?email=${encodeURIComponent(email)}`,    try {

        {      const response = await fetch(

          method: "POST",        `/activities/${encodeURIComponent(activity)}/signup?email=${encodeURIComponent(email)}`,

        }        {

      );          method: "POST",

        }

      const result = await response.json();      );



      if (response.ok) {      const result = await response.json();

        messageDiv.textContent = result.message;

        messageDiv.className = "success";      if (response.ok) {

        signupForm.reset();        messageDiv.textContent = result.message;

        // Refresh the activities list        messageDiv.className = "success";

        fetchActivities();        signupForm.reset();

      } else {      } else {

        messageDiv.textContent = result.detail || "An error occurred";        messageDiv.textContent = result.detail || "An error occurred";

        messageDiv.className = "error";        messageDiv.className = "error";

      }      }



      messageDiv.classList.remove("hidden");      messageDiv.classList.remove("hidden");



      // Hide message after 5 seconds      // Hide message after 5 seconds

      setTimeout(() => {      setTimeout(() => {

        messageDiv.classList.add("hidden");        messageDiv.classList.add("hidden");

      }, 5000);      }, 5000);

    } catch (error) {    } catch (error) {

      messageDiv.textContent = "Failed to sign up. Please try again.";      messageDiv.textContent = "Failed to sign up. Please try again.";

      messageDiv.className = "error";      messageDiv.className = "error";

      messageDiv.classList.remove("hidden");      messageDiv.classList.remove("hidden");

      console.error("Error signing up:", error);      console.error("Error signing up:", error);

    }    }

  });  });



  // Handle unregister button clicks  // Handle unregister button clicks

  document.addEventListener("click", async (event) => {  document.addEventListener("click", async (event) => {

    if (event.target.matches(".delete-btn")) {    if (event.target.matches(".delete-btn")) {

      const activity = event.target.dataset.activity;      const activity = event.target.dataset.activity;

      const email = event.target.dataset.email;      const email = event.target.dataset.email;

            

      try {      try {

        const response = await fetch(        const response = await fetch(

          `/activities/${encodeURIComponent(activity)}/unregister?email=${encodeURIComponent(email)}`,          `/activities/${encodeURIComponent(activity)}/unregister?email=${encodeURIComponent(email)}`,

          {          {

            method: "POST",            method: "POST",

          }          }

        );        );



        const result = await response.json();        const result = await response.json();



        if (response.ok) {        if (response.ok) {

          // Refresh activities list          // Refresh activities list

          fetchActivities();          fetchActivities();

                    

          messageDiv.textContent = result.message;          messageDiv.textContent = result.message;

          messageDiv.className = "success";          messageDiv.className = "success";

        } else {        } else {

          messageDiv.textContent = result.detail || "An error occurred";          messageDiv.textContent = result.detail || "An error occurred";

          messageDiv.className = "error";          messageDiv.className = "error";

        }        }



        messageDiv.classList.remove("hidden");        messageDiv.classList.remove("hidden");



        // Hide message after 5 seconds        // Hide message after 5 seconds

        setTimeout(() => {        setTimeout(() => {

          messageDiv.classList.add("hidden");          messageDiv.classList.add("hidden");

        }, 5000);        }, 5000);

      } catch (error) {      } catch (error) {

        messageDiv.textContent = "Failed to unregister. Please try again.";        messageDiv.textContent = "Failed to unregister. Please try again.";

        messageDiv.className = "error";        messageDiv.className = "error";

        messageDiv.classList.remove("hidden");        messageDiv.classList.remove("hidden");

        console.error("Error unregistering:", error);        console.error("Error unregistering:", error);

      }      }

    }    }

  });  });

    }

  // Initial fetch of activities  });

  fetchActivities();

});  // Handle unregister button clicks
  document.addEventListener("click", async (event) => {
    if (event.target.matches(".delete-btn")) {
      const activity = event.target.dataset.activity;
      const email = event.target.dataset.email;
      
      try {
        const response = await fetch(
          `/activities/${encodeURIComponent(activity)}/unregister?email=${encodeURIComponent(email)}`,
          {
            method: "POST",
          }
        );

        const result = await response.json();

        if (response.ok) {
          // Refresh activities list
          fetchActivities();
          
          messageDiv.textContent = result.message;
          messageDiv.className = "success";
        } else {
          messageDiv.textContent = result.detail || "An error occurred";
          messageDiv.className = "error";
        }

        messageDiv.classList.remove("hidden");

        // Hide message after 5 seconds
        setTimeout(() => {
          messageDiv.classList.add("hidden");
        }, 5000);
      } catch (error) {
        messageDiv.textContent = "Failed to unregister. Please try again.";
        messageDiv.className = "error";
        messageDiv.classList.remove("hidden");
        console.error("Error unregistering:", error);
      }
    }
      messageDiv.classList.remove("hidden");
      console.error("Error signing up:", error);
    }
  });

  // Initialize app
  fetchActivities();
});
